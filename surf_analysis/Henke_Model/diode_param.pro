;; 	program to calculate filter transmission for henke_data_set;	and convert over to electrons for Silicon detector;;	calls henke_t;;	TNW   6/03		BASED on diode.pro but pass parameters instead of user input;;	inputs:  user inputs materials / thickness;		si_thick, noplot as in-line inputs;;	outputs:  wave = wavelength in Angstroms;		  trans = #electrons / photon diode sensitivity;;	usage:  diode_param, material_in, thickness_in, wave_out, sens_out;pro diode_param, material, thickness, wave, trans, $	si_thick=si_thick, oxide_thick=oxide_thick, noplot=noplotif n_params() lt 4 then begin  print, 'USAGE:  diode_param, material_in, thickness_in, wave_out, sens_out'  print, '             [ si_thick=si_thick, oxide_thick=oxide_thick, /noplot]'  returnendifif not ( keyword_set( si_thick ) ) then si_thick = 50000.	; 5 micronsif si_thick lt 1000. then si_thick = 1000.		; lower 1000 Angstrom limitif not ( keyword_set( oxide_thick ) ) then oxide_thick = 70.	; 70 Angstromsif oxide_thick lt 10. then oxide_thick = 10.		; lower 10 Angstrom limitoxide_material = 'SiO'if keyword_set(noplot) then plotit = 0 else plotit = 1ename = ''tname = ''num = 0el = ''thick = 0.0D0nmaterial = n_elements(material)nthick = n_elements(thickness)if (nmaterial ne nthick) then begin  print, 'ERROR:  material and thickness must be same size array !'  returnendiffor k=0,nmaterial-1 do begin	; read, 'Enter element name (CR to end, ex: Al) : ', el	el = strtrim(material[k],2)	if el ne '' then begin	  ; read, 'Enter thickness (in Angstroms) : ', thick	  thick = thickness[k]	  elsave = el	  henke_t, el, wv, mu	  if el eq elsave then begin		if num gt 0 then ename = ename + '/'		ename = ename + elsave		if num gt 0 then tname = tname + '/'		tname = tname + strtrim( string( long(thick) ), 2 )		if num eq 0 then trans = double(wv/wv)		wave = wv		trans = trans * exp( -1.D0 * thick / mu )	  endif else begin		print, 'Unable to find ' + elsave, '  Check upper/lower case ?'		el = ' '	  endelse	  num = num + 1	endifendfortitle = ename + ' : ' + tname + ' Ang';;  get oxide transmission;el = oxide_materialhenke_t, el, wv, mutrans = trans * exp(-1.D0 * oxide_thick / mu );;	get silicon absorption  -  most important for shorter wavelengths;henke_t, 'Si', wv, musi_abs = 1. - exp( -1.D0 * si_thick / mu );;	use number of electrons per each 3.65 eV of photon energy;	Changed to 3.64 - 3/27/2012 A.C.;factor = 6.624E-34 * 2.998E8 / 3.64 / 1D-10 / 1.602177D-19current1 = trans * si_abs * factor / wave;;	Use real Si diode (60 Ang SiO layer) calibration for more exact results;	Data from Raj Korde, Randy Canfield (NewRAD 97 paper by Canfield et al);;	still use Si absorption calculation since it doesn't pick up until;	20 Angstroms;;  old version is commented out;;w_qe = [  2., 7, 12, 17, 22, 27, 32, 37, 42, 47, $;	50.,   53,   58,   63,   68,   73,   78,   83,   90,   95,  100, $;	106.,  116,  126,  136,  146,  156,  166,  175,  185,  195,  205, $;	215.,  225,  235,  245,  255,  270,  290,  310,  330,  350,  370, $;	390.,  410,  430,  450,  470,  490,  519,  537,  556,  584,  599, $;	622.,  639,  657,  669,  683,  699,  712,  735,  752,  771,  800, $;	818,  844,  865,  886,  920,  1026, 1164, 1180, 1216, 1254, 1354, $;	1403, 1441, 1487, 1545, 1608, 1648, 1700, 1750, 1823, 1879, 1937, $;	2000, 2067, 2138, 2214, 2296, 2385, 2537 ];	;s_qe = [1528.3, 436.7, 254.7, 179.8, 138.9, 113.2, 95.52, 82.61, 72.78, 65.03, $;	62.46,58.36,52.48,49.80,42.21,35.32,33.09,32.46,31.22,28.85,27.53, $;	25.94,23.34,22.72,21.45,19.89,17.85,16.88,15.43,14.55,13.55,12.78, $;	12.45,11.80,11.25,10.66,10.08, 9.60, 8.80, 8.38, 7.91, 7.34, 7.01, $;	 6.68, 6.32, 5.92, 5.58, 5.33, 5.08, 4.70, 4.37, 4.05, 3.62, 3.52, $;	 3.25, 3.01, 2.78, 2.64, 2.48, 2.32, 2.20, 2.01, 1.92, 1.80, 1.68, $;	 1.57, 1.47, 1.40, 1.33, 1.27, 1.02, 1.06, 1.05, 1.12, 1.12, 1.10, $;	 1.08, 1.07, 1.03, 1.02, 0.96, 0.88, 0.79, 0.74, 0.69, 0.65, 0.62, $;	 0.57, 0.54, 0.51, 0.48, 0.47, 0.47, 0.39 ]w_qe = [    0.10,  0.13,  0.17,  0.22,  0.28,  0.36,  0.46,  0.60, $    0.77,  1.00,  1.29,  1.66,  2.14,  2.77,  3.57,  4.61, $    5.95,  7.69,  9.92, 12.81, 16.54, $    17, 22, 27, 32, 37, 42, 47, $	50.,   53,   58,   63,   68,   73,   78,   83,   90,   95,  100, $	106.,  116,  126,  136,  146,  156,  166,  175,  185,  195,  205, $	215.,  225,  235,  245,  255,  270,  290,  310,  330,  350,  370, $	390.,  410,  430,  450,  470,  490,  519,  537,  556,  584,  599, $	622.,  639,  657,  669,  683,  699,  712,  735,  752,  771,  800, $	818,  844,  865,  886,  920,  1026, 1164, 1180, 1216, 1254, 1354, $	1403, 1441, 1487, 1545, 1608, 1648, 1700, 1750, 1823, 1879, 1937, $	2000, 2067, 2138, 2214, 2296, 2385, 2537 ]	s_qe = [   30575.340, 23683.605, 18345.275, 14210.218, 11007.208,  8526.164,  6604.351,  5115.719, $    3962.626,  3069.443,  2377.585,  1841.673,  1426.557,  1105.008,   855.937,   663.008, $    513.564,   397.806,   308.140,   238.685,   184.885, $    179.8, 138.9, 113.2, 95.52, 82.61, 72.78, 65.03, $	62.46,58.36,52.48,49.80,42.21,35.32,33.09,32.46,31.22,28.85,27.53, $	25.94,23.34,22.72,21.45,19.89,17.85,16.88,15.43,14.55,13.55,12.78, $	12.45,11.80,11.25,10.66,10.08, 9.60, 8.80, 8.38, 7.91, 7.34, 7.01, $	 6.68, 6.32, 5.92, 5.58, 5.33, 5.08, 4.70, 4.37, 4.05, 3.62, 3.52, $	 3.25, 3.01, 2.78, 2.64, 2.48, 2.32, 2.20, 2.01, 1.92, 1.80, 1.68, $	 1.57, 1.47, 1.40, 1.33, 1.27, 1.02, 1.06, 1.05, 1.12, 1.12, 1.10, $	 1.08, 1.07, 1.03, 1.02, 0.96, 0.88, 0.79, 0.74, 0.69, 0.65, 0.62, $	 0.57, 0.54, 0.51, 0.48, 0.47, 0.47, 0.39 ]current2 = trans * si_abs * interpol( s_qe, w_qe, wave );current = current2current = current1;;	use calculation below 50 Angstrom - but scaled to 50-100 Ang result;   NO longer needed as fixed sensitivity below 50 Angstrom;;wlow = where(wave lt 50);wsc = where( (wave ge 50) and (wave le 200) );if (wlow[0] ne -1) and (wsc[0] ne -1) then begin;  scal = total(current2(wsc)/current1(wsc))/n_elements(wsc);  current(wlow) = current1(wlow) * scal;endif; stop, 'Check out current, current1, current 2'if plotit then begin  plot_trans, wave, current, title, ytitle='Electrons per Photon'  ans = ''  ; read,'Print the plot (Y/N, G=GIF) ? ', ans  ans = strupcase( strmid(ans,0,1) )   if ans eq 'Y' then $	plot_trans, wave, current, title, /plotit, ytitle='Electrons per Photon'  if ans eq 'G' then begin  	; save GIF file of plot  	loadcol  	!p.subtitle = 'Created by Tom Woods (LASP/CU) using IDL'	plot_trans, wave, current, title, ytitle='Electrons per Photon'  	fname = title  	wpos = strpos( title, ':' )  	if wpos ge 0 then fname = strmid( title, 0, wpos )  	fname = strtrim( fname, 2 )  	wpos = strpos( fname, '/' )  	while (wpos ge 0) do begin  		strput, fname, '_', wpos  		wpos = strpos( fname, '/' )  	endwhile  	fname = 'AXUV100_' + fname  	write_gif, fname + '.gif', tvrd()  	!p.subtitle = ''  	print, 'Wrote ' + fname + ' as a GIF and Data file of this plot.'  	data = fltarr(2,n_elements(wave))  	data(0,*) = reverse(wave)  	data(1,*) = reverse(current)  	datcomments = [ $  		'AXUV-100 Filtered Diode data file', $  		'    Filter = ' + title, $  		' ', $  		'Created by Tom Woods (LASP/CU)', $  		'   E-mail: Tom.Woods@lasp.colorado.edu', $  		' ', $  		'2 columns of data:   wavelength in Angstrom', $  		'                     sensitivity in electrons/photon', $  		' ', $  		'File can be read using "write_dat.pro"', $  		' ' ]  	write_dat, data, file=fname+'.dat', comments=datcomments  endifendiftrans = current		; for returning the correct data setreturnend