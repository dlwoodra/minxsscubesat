This is the file HENKE.TXT as of November 20, 1992.	Chris Jacobsen	Department of Physics	SUNY at Stony Brook	Stony Brook NY 11794-3800	(516) 632-8093 (FAX -8101)	jacobsen@xray1.physics.sunysb.edu	jacobsen@sbccmail.bitnet	sbhep::jacobsen***************************************************************			  INTRODUCTIONThe program HENKE deals with the data set on soft x-ray opticalconstants.  The program runs on VAX/VMS, MS-DOS (Turbo C 2.0),and AIX (and probably any Unix) (see notes on compiling below).Earlier versions of the data set were compiled by Burton Henkeand his students and collaborators at the University of Hawaii,and more recently by Eric Gullikson and collaborators at theCenter for X-ray Optics, Lawrence Berkeley Laboratory. Thisprogram currently makes use of the 1988 data set for all 92elements at energies ranging from 10 to 10,000 eV.To understand the use and limitations of the data set, read:	B.L. Henke, "Low energy x-ray interactions:	photoionization, scattering, specular and Bragg	reflection", in D.T. Attwood and B.L. Henke, eds., Low	Energy X-ray Diagnostics (Am. Inst. Phys. conf. proc. 75,	New York, 1981), pp. 146-155.An earlier version of the data set is published as	B.L. Henke, P. Lee, T.J. Tanaka, R.L. Shimabukuro, and	B.K. Fujikawa, "Low-energy x-ray interaction	coefficients: photoabsorption, scattering, and	reflection", At. Data Nucl. Data Tables 27, 1-144 (1982).The present version is published as	B.L. Henke, J.C. Davis, E.M. Gullikson, and R.C.C.	Perera, "A preliminary report on x-ray photoabsorption	coefficients and atomic scattering factors for 92	elements in the 10-10,000 eV region", Lawrence Berkeley	Laboratory report LBL-26259 (Berkeley, USA, November	1988).Because the f1 data is obtained from the f2 data through aKramers-Kronig dispersion integral, it is less accurate.  Also,the data set gives non-physical values for f1 at photon energiesbelow 50 eV.***************************************************************		  WHAT THE PROGRAM CAN GIVE YOUThe program HENKE gives you the following quantities:	f1	Real part of the complex number of electrons			per "molecule" (phase shift)	f2	Imaginary part of the complex number of electrons			per "molecule" (absorption)	delta	Real part of the index of refraction	beta	Imaginary part of the index of refraction			n=(1-delta-i*beta)	2*PI thickness		Material thickness in micrometers needed to give			a 2*PI optical phase shift	1/e attenuation length		Material thickness in micrometers needed to give			1/e intensity attenuation	Transmission		Percentage transmission through a specified			material thickness	Reflection		Percentage specular (i.e., non-Bragg) reflection			at a specified grazing incidence from a			smooth surface***************************************************************			USING THE PROGRAMJust type	henkeor else type	henke henke_data_file compounds_fileor define a system-wide symbol or alias for the above. To dothat, use for files MYHENKE.DAT and MYCOMPOUNDS.DAT:	MS-DOS	henke.bat:		henke myhenke.dat mycompounds.dat	VAX/VMX add to a command file		henke :== $ henke myhenke.dat mycompounds.dat	Unix	make a script file		henke myhenke.dat mycompounds.datThe program needs to get at two files: the binary data file(usually called HENKE.DAT), and a file of definitions ofcompounds (usually called COMPOUNDS.DAT).When you enter formulas, you must properly use both upper andlower case characters.	That is, hydrogen is "H", heliumis "He", and so on. Formulas can include parenthesis, so that allof the following are valid:	OsO4	Ag(CH3)4	1 Ag, 4 CH3 groups (I'm not a chemist)	CHCO(OH)2	2 C, 3 H, 3 OFor HENKE.DAT, the program first looks to see if a file name wasentered with the program call ("henke_data_file" in the lineabove). If no such file is specified or can be opened, theprogram then looks for HENKE_BINARY_DATA_NAME as defined inthe source code file HENKE.H at the time the program was built.For COMPOUNDS.DAT, the program first looks to see if a file naemwas entered with the program call ("compounds_file" in the lineabove).  If no such file is specified or can be opened, theprogram then looks for the file "compounds.dat" in the currentdirectory.  The final fallback position is to look forHENKE_COMPOUNDS_FILE as defined in the source code file HENKE.Hat the time the program was built.The file HENKE.DAT must be built on your machine in a preciselydefined way (described later). You can, however, make your own"compounds_file" with any text editor. It must be along the linesof:	! This is an example file "compounds.dat" for HENKE.	! Entries are:	! compound	formula			density (g/cc)	water		H2O			1.0	air		N78.08O20.95Ar0.93	1.2047e-3The tab stops or spaces in the file don't really matter; just useone compound/formula/density entry per line, with a space or tabsseparating the three pieces of info.***************************************************************		      BUILDING THE PROGRAMThe easy way:	IBM PC		copy henke_pc.exe henke.exe	    (Usually C:\HENKE)	VAX		copy henke_va.exe henke.exe	    (On BNLX1L, directory PUBLIC_DISK:[X1_LIB.HENKE])	IBM RS/6000	copy henke_rs.exe henke	    (On xray1, directory /usr/local/lib/xraycode/henke)The hard way: build it. The source code files needed are HENKE.H,HENKE.C, HENKE_FUNCTIONS.C, HENKE_SERIES.C, SCRN.H, SCRN.C, andDATATYPE.H. In principle, all system-specific pieces of code areisolated with statements like "#ifdef TURBOC", "#ifdef _AIX", and"#ifdef VAXC".The system-specific bits of the HENKE* files are minor and shouldbe trivial to change. Porting the file DATATYPE.H is prettyself-explanatory. The hardest file to port is SCRN.C. This filedeals with moving the cursor around on the screen and readingarrow and function keys and so on. At present, there are threeflavors of code (isolated with "#ifdef" statements):	Turbo C		routines from <conio.h>	VAXC		the SMG$ library (I tried VAX C curses,				but I couldn't get getch() to				work on single characters - it				always wanted to buffer things				until RETURN was hit!)	Unix		 The Unix "curses" library (note that				for AIX you must "#define NLS")The AIX flavor will likely work as-is on any Unix, provided youadd some statement like	#ifdef Your_favorite_Unix_Machine	#include <curses.h>	#include <term.h>	#include "scrn.h"	#define CURSES	#endifto the file SCRN.C.  You can test it with TESTSCRN.C.If you build HENKE on another computer, let me know!***************************************************************		       BUILDING HENKE.DATThe easy way:	IBM PC		copy henke_pc.dat henke.dat	    (Usually C:\HENKE)	VAX		copy henke_va.dat henke.dat	    (On BNLX1L, directory PUBLIC_DISK:[X1_LIB.HENKE])	IBM RS/6000	copy henke_rs.dat henke.dat	    (On xray1, directory /usr/local/lib/xraycode/henke)	    (also likely to work with any Unix system	     using IEEE floating point data format)The hard way: build it. The data files are available in ASCIIform as simple text files readable by any system (H.ASC, HE.ASC,and so on, plus ENERGY.ASC).To build it, look at the lines beginning with "#ifdef TURBOC" inDATATYPE.H and REPACK_HENKE.C.	Add appropriate lines for yourcomputer.  Then, with all the .ASC data files, run the programREPACK_HENKE to build HENKE.DAT.If you build HENKE.DAT on another computer, please let me know!***************************************************************		   INTERFACE WITH IDL/PV~WAVEI also have two subroutines which allow one to access the Henkedata from the IDL software program from Research Systems Inc.,Boulder, Colorado. The routines are likely to work with PV~WAVEfrom Precision Visuals, as well. The following description appliesto AIX (IBM RS/6000).There are two routines that allow IDL to use the Henke data set.These routines also look for a file "compounds.dat" in your currentdirectory, or in /usr/local/lib/xraycode/henke/compounds.dat toresolve things that aren't really formulas like "protein" or "air".*******************************The first is	henke.pro -> henke_idl.cHere's an example of using it.IDL> henkehenke,compound,density,energy,f1,f2,delta,beta[,graze_mrad,reflect]   compound: e.g., 'protein' or 'Si3N4' (string)    density: g/cm^3 (float)     energy: eV (float)     f1, f2: (float - RETURNED)delta, beta: (float - RETURNED) graze_mrad: mrad (float)    reflect: percent (float - RETURNED)DL> density=1.IDL> energy=350.IDL> f1=1.IDL> f2=1.IDL> delta=1.IDL> beta=1.IDL> graze_mrad=50.IDL> reflect=1.IDL> henke,'protein',density,energy,f1,f2,delta,beta,graze_mrad,reflectIDL> print,density,f1,f2,delta,beta,reflect      1.35000      305.593      117.934   0.00191423  0.000738736      42.3617IDL> density=3.44IDL> henke,'Si3N4',density,energy,f1,f2,delta,beta,graze_mrad,reflectIDL> print,density,f1,f2,delta,beta,reflect      3.44000      56.1663      15.5733   0.00466798   0.00129430      72.7973IDL>**********************************The second is	henke_array.pro -> henke_array_idl.cHere's an exampleIDL> henke_arrayhenke_array,compound,density,num_energies,energy_array, $  f1_array,f2_array,delta_array,beta_array[,graze_mrad,reflect_array]          compound: e.g., 'protein' or 'Si3N4' (string)           density: g/cm^3      (float)      num_energies: 300         (long)      energy_array: eV          fltarr(300)      f1_,f2_array: f1,f2       fltarr(300) delta_,beta_array: delta, beta fltarr(300        graze_mrad: mrad        (float)     reflect_array: percent     fltarr(300)IDL> num_energies=long(300)IDL> energy=fltarr(300)IDL> f1=fltarr(300)IDL> f2=fltarr(300)IDL> delta=fltarr(300)IDL> beta=fltarr(300)IDL> reflect=fltarr(300)IDL> graze_mrad=50.IDL> density=3.44IDL> henke_array,'Si3N4',density,num_energies,energy,f1,f2,delta,beta,$IDL> graze_mrad,reflectIDL> !x.title='Wavelength in Angstroms'IDL> !y.title='1/e Absorption length in microns'IDL> !p.title='Silicon Nitride'IDL> lambda=12398./energyIDL> mu=1.0e-4*lambda/(4.*!pi*beta)IDL> plot,lambda,mu,xrange=[10,50]*********************************On xray1, the .pro files are in	/usr/local/lib/idl/lib/local/spectand the .c files and the Makefile and the data files are in	/usr/local/lib/xraycode/henkeIt should be possible to also incoroporate these routines on VMS-IDLas well. There, the Henke data is in PUBLIC_DISK:[X1_LIB.HENKE] andthe .c files should all be there as well.  The IDL .pro files arein (as I recall) *******end