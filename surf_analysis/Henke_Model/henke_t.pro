;+;	MODIFIED VERSION OF HENKE.PRO to return only 1/e absorption length;		and wavelength arrays;	TNW  5/93;; pro henke,compound_name,density,energy,f1,f2,delta,beta, $;       graze_mrad,reflect;; All you give it is compound_name and density;; CJJ Feb. 93;-pro henke_t, element_name, wavelength, mu, help=help, all=allif (keyword_set(help) or ((n_params(0) lt 1) and not( keyword_set(all) )) ) $  then begin  print,'henke_t,element_name,wavelength,mu'  print,'    where mu = 1/e absorption length in Angstroms'  returnendifelements = [  'Al', 'Sb', 'As', 'Ba', 'Be', 'B' , 'Cd', 'Ca', 'C' , 'Cr', $	'Ce', 'Co', 'Cu', 'Ge', 'Au', 'Hf', 'In', 'Ir', 'Fe', 'La', 'Pb', $	'Lu', 'Mg', 'Mn', 'Mo', 'Ni', 'Nb', 'Os', 'Pd', 'Pt', 'Pr', 'Rh', $	'Ru', 'Sm', 'Sc', 'Se', 'Si', 'Ag', 'Na', 'S' , 'Ta', 'Te', 'Tb', $	'Tm', 'Sn', 'Ti', 'W' , 'V' , 'Y' , 'Zn', 'Zr', 'Bi', 'Dy', 'Er', $	'Eu', 'Gd', 'Ho', 'I' , 'Li', 'Nd', 'Ra', 'Rb', 'Re', 'Sr', 'Tc', $	'Tl', 'Th', 'Yb', $	'Al2O3', 'SiO2', 'TiO', 'SnO2', 'MgF2', 'SiO', 'Si3N4', 'CdF2' ]dens =     [ 2.70, 6.69, 5.73, 3.5, 1.85, 2.37, 8.65, 1.55, 1.95, 7.19, $	6.66, 8.9, 8.96, 5.32, 19.32, 13.31, 7.31, 22.42, 7.87, 6.15, 11.35, $	9.84, 1.74, 7.3, 10.22, 8.90, 8.57, 22.57, 12.02, 21.45, 6.7, 12.41, $	12.41, 7.45, 2.99, 4.79, 2.33, 10.5, 0.97, 2.0, 16.65, 6.24, 8.23, $	9.32, 7.31, 4.54, 19.3, 6.11, 4.47, 7.13, 6.51, 9.75, 8.55, 9.07, $	5.24, 7.90, 8.8, 4.93, 0.53, 6.9, 5., 1.532, 21.02, 2.54, 11.50, $	11.85, 11.72, 6.7, $	2.70, 2.20, 4.54, 7.31, 3.0, 2.20, 2.30, 6.64 ]if keyword_set(all) then begin  element_name = elements  nt = n_elements(dens)  ans = ' '  ans2 = ans  read, 'Send plots to:  Ps2, Qms2, Screen ? ', ans  ans = strupcase(strmid(ans,0,1))  if ans eq 'Q' then qms2  if ans eq 'P' then ps2  !xtitle = 'Wavelength (nm)'  !ytitle = 'Transmission'  set_xy,0,0,1E-6, 1.  for k=0,nt-1 do begin	compound_name = strtrim( elements( k ), 2)	density = dens( k )	!mtitle = compound_name + ' : 1000 Angstroms'	name_save = compound_name	henke_array,compound_name,density,enarr,f1arr,f2arr,deltaarr,betaarr, $        	graze_mrad,reflect_arr	if compound_name eq name_save then begin	  mu=(1.2398/(enarr*4.*!pi*betaarr) ) * 1.E4	; convert to Angstroms  	  wavelength = 12397. / enarr			; convert to wavelength (Angstroms)		  plot_io, wavelength, exp(-1000./mu)	  if (ans ne 'P') and (ans ne 'Q') then read, 'Next ', ans2	endif else print, 'Did not process ', name_save  endfor  if ans eq 'P' then send2, 'B'  if ans eq 'Q' then send2endif else begin  w = where( elements eq element_name )  if w(0) eq -1 then begin	print, 'Could not find the element ', element_name	print, 'A density of 3.0 is assumed !!!!'	compound_name = strtrim( element_name, 2 )	density=3.0  endif else begin	compound_name = strtrim( elements( w(0) ), 2 )	density = dens( w(0) )  endelse  name_save = compound_name  henke_array,compound_name,density,enarr,f1arr,f2arr,deltaarr,betaarr, $        graze_mrad,reflect_arr  if compound_name ne name_save then begin	print, 'Could not find the element ', name_save	wavelength = -1	mu = -1	return  endif	  mu=(1.2398/(enarr*4.*!pi*betaarr) ) * 1.E4	; convert to Angstroms  wavelength = 12397. / enarr			; convert to wavelength (Angstroms)endelsereturnend