;;	read_surferpc.pro;;	read a SURF data log from NIST PC labview application;;	Output is array of SURF log data:;		data[0,*] = sec of day;		data[1-4,*] = x, y, u, v;		data[5,*] = Beam Current;		data[6,*] = Beam Energy;		data[7,*] = Beam Size;		data[8] = Gain;		data[9] = Multiplier;		data[10] = PC time;;	revised from EVE's read_surfminicom.pro: 1/22/10  Tom Woods;function read_surferpc, filename, clean=clean, debug=debug;;	check inputs;if keyword_set(debug) then debug = 1 else debug = 0sdata = -1filetry = 0if (n_params(0) lt 1) then begin	print, 'USAGE: surf_data = read_surferpc( filename, /clean )'	filename = ''	goto, badfileendiffsize = size(filename)if (total(fsize) eq 0) then begin  filename = ''  goto, badfileendifflen = strlen(filename)if (flen lt 1) then goto, badfiletry_file_again:on_ioerror, badfileif (debug gt 0) then print, 'Reading ', filename, ' ...'flen = strlen(filename)openr,lun, filename, /get_lunon_ioerror, baddatas = ' '; data[0] = sec of day; data[1-4] = x, y, u, v; data[5] = Beam Current; data[6] = Beam Energy; data[7] = Beam Size; data[8] = Gain; data[9] = Multiplier; data[10] = PC timenumcol = 11sdataraw = dblarr(numcol)NTRY = 5000sdata = dblarr(numcol, NTRY)sdata_len = NTRYcnt = 0; skip header in fileif (not eof(lun)) then readf,lun,swhile (not eof(lun)) do begin	readf,lun,s		; read string and parse out values	bad = strpos( s, "*" )	;  throw out lines with **** values	if (bad lt 0) then begin		; if (cnt eq 0) and (debug gt 0) then stop, 'STOP for first line of data...'		;  parse out values		fileSec = long(strmid(s,9,2))*3600.+long(strmid(s,12,2))*60.+double(strmid(s,15,6))		bcTime = double(strmid(s,122,12))		bcTimeLong = long(bcTime)		bcHour = (bcTimeLong / 10000L)		bcMin = ((bcTimeLong - bcHour*10000L) / 100L)		bcSec = bcTime - bcHour*10000L - bcMin*100L		bcSOD = bcHour * 3600.D0 + bcMin * 60. + bcSec		sdata[0,cnt] = bcSOD		sdata[1,cnt] = double(strmid(s,38,9))		sdata[2,cnt] = double(strmid(s,48,9))		sdata[3,cnt] = double(strmid(s,58,8))		sdata[4,cnt] = double(strmid(s,67,8))		sdata[5,cnt] = double(strmid(s,21,17))		sdata[6,cnt] = double(strmid(s,76,9))		sdata[7,cnt] = double(strmid(s,86,7))		sdata[8,cnt] = double(strmid(s,94,15))		sdata[9,cnt] = double(strmid(s,109,12))		sdata[10,cnt] = fileSec		cnt = cnt + 1		; if (keyword_set(debug) and (cnt eq 1)) then stop, 'DEBUG first data line...'		if (cnt ge sdata_len) then begin			sdata = [ [sdata], [dblarr(numcol, NTRY)] ]			sdata_len = sdata_len + NTRY		endif	endifendwhile; if (debug gt 0) then stop, 'STOPPED inside read_surferpc()'close, lunfree_lun, lunon_ioerror, NULLgoto, gotfilebaddata:	close, lun	free_lun, lun	on_ioerror, NULL	goto, gotfile	badfile:	on_ioerror, NULL	filetry = filetry + 1	if (filetry gt 2) then return, -1	filename = dialog_pickfile( /must_exist, title='SURF PC Log File',filter='SURF*.*' )	goto, try_file_againgotfile:;   make sdata the right length at the endsdata = sdata[*,0:cnt-1]if (debug gt 0) then print, 'READ_SURFERPC:  Read ' + strtrim(cnt,2) + ' Records'if keyword_set( clean ) and (cnt gt 1) then begin	orgcnt = cnt	; check for negative numbers	wgd = where( sdata[5,*] gt 0.0 )	if (wgd[0] ne -1) then sdata = sdata[*,wgd] else begin		sdata=sdata[*,0]		cnt = 0		goto, endclean	endelse	; check for 0.X truncation	bc10 = sdata[5,*] * 10.	wgd = where(((bc10 - long(bc10)) ne 0.0 ) or (bc10 gt 1000.) )	if (wgd[0] ne -1) then sdata = sdata[*,wgd] else begin		sdata=sdata[*,0]		cnt = 0		goto, endclean	endelse	cnt = n_elements(wgd)	; check for 0.0X truncation	bc100 = sdata[5,*] * 100.	wgd = where(((bc100 - long(bc100)) ne 0.0 ) or (bc100 gt 100.) )	if (wgd[0] ne -1) then sdata = sdata[*,wgd] else begin		sdata=sdata[*,0]		cnt = 0		goto, endclean	endelse	cnt = n_elements(wgd)	; check for 0.00X truncation	bc1000 = sdata[5,*] * 1000.	wgd = where(((bc1000 - long(bc1000)) ne 0.0 ) or (bc1000 gt 10.) )	if (wgd[0] ne -1) then sdata = sdata[*,wgd] else begin		sdata=sdata[*,0]		cnt = 0		goto, endclean	endelse	cnt = n_elements(wgd)	; check for 0.000X truncation	bc10000 = sdata[5,*] * 10000.	wgd = where(((bc10000 - long(bc10000)) ne 0.0 ) or (bc10000 gt 1.) )	if (wgd[0] ne -1) then sdata = sdata[*,wgd] else begin		sdata=sdata[*,0]		cnt = 0		goto, endclean	endelse	cnt = n_elements(wgd)endclean:	if (debug gt 0) then print, '          Cleaned ' + strtrim(orgcnt-cnt,2) + ' Records'endifreturn, sdataend