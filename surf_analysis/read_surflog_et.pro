;;	read_surflog_et.pro;;	read a SURF data file from SURF-PC - 2010 log file format ;		and the correct column for Eastern Time (ET);;	Tom Woods;	9/8/10;;	updated 7/26/00  to fix "clean" option;	updated 9/27/09 from read_surflog.pro to read SURF PC Mini-COM file instead; updated 9/8/10  updated for different file format for rocket EVE;	updated 9/21/10  updated for Eastern Time from read_surflog10.pro (EVE SURF_IDL library);function read_surflog_et, filename, clean=clean, debug=debugif keyword_set(debug) then debug = 1 else debug = 0sdata = -1filetry = 0;  define default log file pathfpath = getenv('SURF_LOG')if (strlen(fpath) gt 1) then fpath=fpath+'/'if n_params(0) lt 1 then begin	print, 'USAGE: surf_data = read_surflog_et( filename, /clean )'	filename = ''	goto, badfileendifflen = strlen(filename)if (flen lt 1) then goto, badfiletry_file_again:on_ioerror, badfileif (debug gt 0) then print, 'Reading ', filename, ' ...'flen = strlen(filename)openr,lun, filename, /get_lunon_ioerror, baddatas = ' '; data[0] = sec of day; data[1-4] = x, y, u, v; data[5] = Beam Current; data[6] = Beam Energysdataraw = dblarr(8)NTRY = 5000sdata = dblarr(8, NTRY)sdata_len = NTRYcnt = 0if not eof(lun) then readf,lun,s		; read file headerif not eof(lun) then readf,lun,s    ; read file header line 2while (not eof(lun)) do begin	readf,lun,s		; read string and parse out values	bad = strpos( s, "*" )	;  throw out lines with **** values	if (bad lt 0) then begin		; if (cnt eq 0) and (debug gt 0) then stop, 'STOP for first line of data...'		;  parse out values		;  OLD WAY with specific format		; theSec = long(strmid(s,9,2))*3600.+long(strmid(s,12,2))*60.+float(strmid(s,15,6))		; sdata[0,cnt] = theSec		; sdata[1,cnt] = float(strmid(s,34,8))  ; X, Y, Yaw, Pitch		; sdata[2,cnt] = float(strmid(s,42,8))		; sdata[3,cnt] = float(strmid(s,50,7))		; sdata[4,cnt] = float(strmid(s,57,7))		; sdata[5,cnt] = float(strmid(s,21,13))  ; Beam Current, Beam Energy		; sdata[6,cnt] = float(strmid(s,64,8))		; NEW WAY with simplier parsing		sc=strtrim(strcompress(s),2) ;remove unnecessary white space		sa=strsplit(sc,' ',/extract)		; UT time of PC, but not the time associated with Beam Current value		theSec2 = long(strmid(sa[1],0,2))*3600.+long(strmid(sa[1],3,2))*60.+float(strmid(sa[1],6,6))		; Eastern Time (ET) of Beam Current read time - more accurate one to use !		timeET = float(sa[11])		timeETlong = long(timeET)		hourET = long(timeETlong/10000L)		minET = long((timeETlong - hourET*10000L)/100L)		secET = timeET - hourET*10000L - minET*100L		theSecET = hourET * 3600. + minET * 60. + secET		sdata[0,cnt] = theSecET		sdata[1,cnt] = float(sa[3])  ; X, Y, Yaw, Pitch		sdata[2,cnt] = float(sa[4])		sdata[3,cnt] = float(sa[5])		sdata[4,cnt] = float(sa[6])		sdata[5,cnt] = float(sa[2])  ; Beam Current, Beam Energy, Beam Size		sdata[6,cnt] = float(sa[7])		sdata[7,cnt] = float(sa[8])		cnt = cnt + 1		if (cnt ge sdata_len) then begin			sdata = [ [sdata], [dblarr(8, NTRY)] ]			sdata_len = sdata_len + NTRY		endif	endifendwhile; if (debug gt 0) then stop, 'STOPPED inside read_surflog_et()'close, lunfree_lun, lunon_ioerror, NULLgoto, gotfilebaddata:	close, lun	free_lun, lun	on_ioerror, NULL	goto, gotfile	badfile:	on_ioerror, NULL	filetry = filetry + 1	if (filetry gt 2) then return, -1	filename = dialog_pickfile( /must_exist, title='SURF PC Log File',filter='*', path=fpath )	goto, try_file_againgotfile:;   make sdata the right length at the endsdata = sdata[*,0:cnt-1]if (debug gt 0) then print, 'READ_SURFLOG_ET:  Read ' + strtrim(cnt,2) + ' Records'if keyword_set( clean ) and (cnt gt 1) then begin	orgcnt = cnt	; check for negative numbers	wgd = where( sdata[5,*] gt 0.0 )	if (wgd[0] ne -1) then sdata = sdata[*,wgd] else begin		sdata=sdata[*,0]		cnt = 0		goto, endclean	endelse	; check for 0.X truncation	bc10 = sdata[5,*] * 10.	wgd = where(((bc10 - long(bc10)) ne 0.0 ) or (bc10 gt 1000.) )	if (wgd[0] ne -1) then sdata = sdata[*,wgd] else begin		sdata=sdata[*,0]		cnt = 0		goto, endclean	endelse	cnt = n_elements(wgd)	; check for 0.0X truncation	bc100 = sdata[5,*] * 100.	wgd = where(((bc100 - long(bc100)) ne 0.0 ) or (bc100 gt 100.) )	if (wgd[0] ne -1) then sdata = sdata[*,wgd] else begin		sdata=sdata[*,0]		cnt = 0		goto, endclean	endelse	cnt = n_elements(wgd)	; check for 0.00X truncation	bc1000 = sdata[5,*] * 1000.	wgd = where(((bc1000 - long(bc1000)) ne 0.0 ) or (bc1000 gt 10.) )	if (wgd[0] ne -1) then sdata = sdata[*,wgd] else begin		sdata=sdata[*,0]		cnt = 0		goto, endclean	endelse	cnt = n_elements(wgd)	; check for 0.000X truncation	bc10000 = sdata[5,*] * 10000.	wgd = where(((bc10000 - long(bc10000)) ne 0.0 ) or (bc10000 gt 1.) )	if (wgd[0] ne -1) then sdata = sdata[*,wgd] else begin		sdata=sdata[*,0]		cnt = 0		goto, endclean	endelse	cnt = n_elements(wgd)endclean:	if (debug gt 0) then print, '          Cleaned ' + strtrim(orgcnt-cnt,2) + ' Records'endifreturn, sdataend